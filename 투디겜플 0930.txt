프로그래밍 비법

한줄 짜고 작성한다.

조금씩 살을 붙여서

짧게 간단하게 코딩하고, 실행되는지 를 보고 추가하고, 실행 되면 다시 한줄 더 추가

한줄입력하고 실행, 또 한줄 입력하고 실행.

에자일 프로그래밍 기법

increment programming 눈덩이에 눈을 키워가면서 프로 그래밍을 해야 한다.

몸에 익혀야함.

한 두줄 입력하고 실행한다.

장점은 어디서 틀렸는지. 알 수 있음.

처음에는 시간이 더 걸리는 듯 하지만, 

나중에 코드가 쌓였을때 엄청난 효과를 봄.

컴파일 빨리하는 구조를 사용하는 방법을 사용해야 빨라짐

실제 월드에 작용하는 

시뮬레이션은 효과가 그럴듯하게 나오기만 하면 돼.

결과는 중력이 막는 것 처럼 시뮬레이션 처럼 됬고 보여지고 게임이됨

나쁘게 말하면 사기 치는거다. 저렇게해도 충분하니깐 

소년에게 중력을 부여해서 하기에는 너무 비용이 많이 들어서

사람이 봤을때 그럴 듯 하게 보이게 하는 것 게임 최적화,

계산하는 대만 시간이 너무 걸림.

사람이 봤을때 그럴 듯 하게. 효과적으로 표현 할줄 알아야함

속성 + 행위 = 소년 객체는 행위와 속성을 따라서. 결정됨

소년을 나타내는 값, 객체의 속성. 신발을 신고 있고.

이 소년에 위치 속성을 위해 사용 한 것.

상태를 저장 하는 변수. 값/상태 자체. 속성이라고 부름

객체는 행위와 객체의 합이다. 

객체지향 프로그래밍은 객체위주 프로그래밍이다.
		      객체 중심 프로그래밍.
각각의 객체들이 어느 행위를 갖고 있는지
코드로 풀어놔서. 움직이는것 . 객체 위주 프로그래밍

클래스 이름은 앞글자 대문자. 변수 클래스 이름 잘 붙이는건

클래스 이름은 반드시 명사형이 되어야 한다.

self는 클래스

c++에는 디스 포인터와 동일함. 현재 만들어진 객체

자신을 뜻함. 이미지라는 속성을 만들고, 속성에 초기 값을

이미지 로딩으로 쓰겠다. grass라는 객체의 속성이 됨

객체는 속성

객체를 모델링 할때 프로그램에서 필요로하는 최소 한의 속성만

추출해서 코드로 담아내는것, 객체지향 프로그래밍에서 가장 핵심적

